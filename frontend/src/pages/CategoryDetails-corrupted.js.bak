import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Button,
  Chip,
  Grid,
  TextField,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  CircularProgress,
  Alert,
  IconButton,
  Toolbar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  useMediaQuery,
  useTheme,
  Fab,
  Menu,
  FormControlLabel,
  Checkbox,
  Divider,
  Tooltip,
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import {
  Download as DownloadIcon,
  Upload as UploadIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  FilterList as FilterIcon,
  ViewColumn as ViewColumnIcon,
} from '@mui/icons-material';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';
import { saveAs } from 'file-saver';
import { useAuth } from '../contexts/AuthContext';
import Header from '../components/common/Header';
import Footer from '../components/common/Footer';
import AddProductForm from '../components/AddProductForm';
import EditProductForm from '../components/EditProductForm';

const CategoryDetails = () => {
  const { categoryId } = useParams();
  const { user } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [category, setCategory] = useState(null);
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    brand: '',
    phase: '',
    minHp: '',
    maxHp: '',
    minPrice: '',
    maxPrice: '',
  });
  const [showFilters, setShowFilters] = useState(false);
  const [addDialog, setAddDialog] = useState(false);
  const [editDialog, setEditDialog] = useState(false);
  const [deleteDialog, setDeleteDialog] = useState(false);
  const [currentProduct, setCurrentProduct] = useState(null);
  const [uploading, setUploading] = useState(false);
  
  // Column visibility state
  const [columnVisibilityMenuAnchor, setColumnVisibilityMenuAnchor] = useState(null);
  const [columnVisibility, setColumnVisibility] = useState({
    modelNumber: true,
    brand: true,
    hp: false,        // Hidden by default - optional field
    outlet: false,    // Hidden by default - optional field  
    maxHead: false,   // Hidden by default - optional field
    maxFlow: false,   // Hidden by default - optional field
    watt: false,      // Hidden by default - optional field
    phase: true,
    price: user?.role === 'admin',
    actions: user?.role !== 'employee',
  });

  useEffect(() => {
    fetchCategoryData();
    fetchBrands();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [categoryId]);

  useEffect(() => {
    applyFilters();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [products, filters]);

  const fetchCategoryData = async () => {
    try {
      const [categoryRes, productsRes] = await Promise.all([
        axios.get(`/api/categories`),
        axios.get(`/api/products/category/${categoryId}`)
      ]);

      const currentCategory = categoryRes.data.data.find(cat => cat._id === categoryId);
      setCategory(currentCategory);
      setProducts(productsRes.data.data);
    } catch (error) {
      console.error('Failed to fetch category data:', error);
      toast.error('Failed to fetch category data');
    } finally {
      setLoading(false);
    }
  };

  const fetchBrands = async () => {
    try {
      const response = await axios.get('/api/brands');
      setBrands(response.data.data);
    } catch (error) {
      console.error('Failed to fetch brands:', error);
      toast.error('Failed to fetch brands');
    }
  };

  const handleAddSuccess = (newProduct) => {
    setProducts(prev => [...prev, newProduct]);
    setAddDialog(false);
    toast.success('Product added successfully!');
  };

  // Filter helper functions
  const filterByBrand = (products, brandId) => {
    return brandId ? products.filter(product => product.brand._id === brandId) : products;
  };

  const filterByPhase = (products, phase) => {
    return phase ? products.filter(product => product.phase === phase) : products;
  };

  const filterByHpRange = (products, minHp, maxHp) => {
    let filtered = products;
    if (minHp) {
      filtered = filtered.filter(product => product.hp >= Number(minHp));
    }
    if (maxHp) {
      filtered = filtered.filter(product => product.hp <= Number(maxHp));
    }
    return filtered;
  };

  const filterByPriceRange = (products, minPrice, maxPrice, userRole) => {
    if (userRole === 'employee') return products;
    
    let filtered = products;
    if (minPrice) {
      filtered = filtered.filter(product => product.price >= Number(minPrice));
    }
    if (maxPrice) {
      filtered = filtered.filter(product => product.price <= Number(maxPrice));
    }
    return filtered;
  };

  const applyFilters = () => {
    let filtered = [...products];

    filtered = filterByBrand(filtered, filters.brand);
    filtered = filterByPhase(filtered, filters.phase);
    filtered = filterByHpRange(filtered, filters.minHp, filters.maxHp);
    filtered = filterByPriceRange(filtered, filters.minPrice, filters.maxPrice, user?.role);

    setFilteredProducts(filtered);
  };

  const handleFilterChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const clearFilters = () => {
    setFilters({
      brand: '',
      phase: '',
      minHp: '',
      maxHp: '',
      minPrice: '',
      maxPrice: '',
    });
  };

  const handleExport = async () => {
    try {
      const queryParams = new URLSearchParams({
        category: categoryId,
        ...filters
      });

      const response = await axios.get(`/api/products/export?${queryParams}`, {
        responseType: 'blob'
      });

      const blob = new Blob([response.data], {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });

      saveAs(blob, `${category?.name || 'products'}-export.xlsx`);
      toast.success('Data exported successfully');
    } catch (error) {
      console.error('Failed to export data:', error);
      toast.error('Failed to export data');
    }
  };

  const handleBulkUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    setUploading(true);
    try {
      const response = await axios.post('/api/products/bulk-upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      toast.success(response.data.message);
      fetchCategoryData(); // Refresh data
    } catch (error) {
      console.error('Bulk upload failed:', error);
      toast.error(error.response?.data?.message || 'Upload failed');
    } finally {
      setUploading(false);
      event.target.value = ''; // Reset file input
    }
  };

  const downloadTemplate = async () => {
    try {
      const response = await axios.get('/api/products/download-template', {
        responseType: 'blob'
      });

      const blob = new Blob([response.data], {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });

      saveAs(blob, 'product-template.xlsx');
      toast.success('Template downloaded');
    } catch (error) {
      console.error('Failed to download template:', error);
      toast.error('Failed to download template');
    }
  };

  // Column definition helpers
  const createBasicColumns = (isMobile) => [
    { 
      field: 'modelNumber', 
      headerName: 'Model Number', 
      width: isMobile ? 120 : 150,
      minWidth: 100,
    },
    { 
      field: 'brand', 
      headerName: 'Brand', 
      width: isMobile ? 100 : 120,
      minWidth: 80,
      valueGetter: (params) => params.row.brand?.name || '',
    },
    { 
      field: 'hp', 
      headerName: 'HP', 
      width: isMobile ? 60 : 80, 
      minWidth: 50,
      type: 'number',
    },
    { 
      field: 'outlet', 
      headerName: 'Outlet', 
      width: isMobile ? 80 : 100,
      minWidth: 70,
    },
    { 
      field: 'maxHead', 
      headerName: 'Max Head', 
      width: isMobile ? 80 : 100, 
      minWidth: 70,
      type: 'number',
    },
    { 
      field: 'maxFlow', 
      headerName: 'Max Flow', 
      width: isMobile ? 80 : 100, 
      minWidth: 70,
      type: 'number',
    },
    { 
      field: 'watt', 
      headerName: 'Watt', 
      width: isMobile ? 70 : 100, 
      minWidth: 60,
      type: 'number',
    },
    { 
      field: 'phase', 
      headerName: 'Phase', 
      width: isMobile ? 80 : 100,
      minWidth: 70,
    },
  ];

  const createPriceColumn = (isMobile) => ({
    field: 'price',
    headerName: 'Price',
    width: isMobile ? 80 : 100,
    minWidth: 70,
    type: 'number',
    valueFormatter: (params) => `Rs.${params.value?.toLocaleString() || 0}`,
  });

  const createActionsColumn = (isMobile) => ({
    field: 'actions',
    headerName: 'Actions',
    width: isMobile ? 80 : 150,
    minWidth: 70,
    sortable: false,
    renderCell: (params) => (
      <Box>
        <IconButton 
          size={isMobile ? "small" : "medium"} 
          onClick={() => handleEdit(params.row)}
        >
          <EditIcon fontSize={isMobile ? "small" : "medium"} />
        </IconButton>
        <IconButton 
          size={isMobile ? "small" : "medium"} 
          onClick={() => handleDelete(params.row)}
          color="error"
        >
          <DeleteIcon fontSize={isMobile ? "small" : "medium"} />
        </IconButton>
      </Box>
    ),
  });

  const columns = [
    ...createBasicColumns(isMobile),
    ...(user?.role !== 'employee' ? [createPriceColumn(isMobile)] : []),
    ...(user?.role === 'admin' ? [createActionsColumn(isMobile)] : []),
  ];

  const handleEdit = (product) => {
    setCurrentProduct(product);
    setEditDialog(true);
  };

  const handleDelete = (product) => {
    setCurrentProduct(product);
    setDeleteDialog(true);
  };

  const handleEditSuccess = () => {
    setEditDialog(false);
    setCurrentProduct(null);
    fetchCategoryData(); // Refresh the data
  };

  const handleConfirmDelete = async () => {
    if (!currentProduct) return;

    try {
      const response = await axios.delete(`/api/products/${currentProduct._id}`);
      
      if (response.data.success) {
        toast.success('Product permanently deleted from database!');
        setDeleteDialog(false);
        setCurrentProduct(null);
        fetchCategoryData(); // Refresh the data
      }
    } catch (error) {
      console.error('Delete product error:', error);
      toast.error(error.response?.data?.message || 'Failed to delete product');
    }
  };

  // Column visibility functions
  const handleColumnVisibilityMenuOpen = (event) => {
    setColumnVisibilityMenuAnchor(event.currentTarget);
  };

  const handleColumnVisibilityMenuClose = () => {
    setColumnVisibilityMenuAnchor(null);
  };

  const handleColumnVisibilityToggle = (columnField) => {
    setColumnVisibility(prev => ({
      ...prev,
      [columnField]: !prev[columnField]
    }));
  };

  const resetColumnVisibility = () => {
    setColumnVisibility({
      modelNumber: true,
      brand: true,
      hp: false,        // Hidden by default - optional field
      outlet: false,    // Hidden by default - optional field
      maxHead: false,   // Hidden by default - optional field
      maxFlow: false,   // Hidden by default - optional field
      watt: false,      // Hidden by default - optional field
      phase: true,
      price: user?.role === 'admin',
      actions: user?.role !== 'employee',
    });
  };

  const canAddProduct = user?.role === 'admin' || user?.role === 'project_user';

  // Render helper functions to reduce main component complexity
  const renderPageHeader = () => (
    <Box sx={{ mb: { xs: 2, md: 3 } }}>
      <Typography 
        variant={isMobile ? "h5" : "h4"} 
        component="h1" 
        gutterBottom
        sx={{ fontSize: { xs: '1.5rem', md: '2.125rem' } }}
      >
        {category.name}
      </Typography>
      <Typography variant="subtitle1" color="text.secondary">
        {filteredProducts.length} products found
      </Typography>
    </Box>
  );

  const renderToolbarButtons = () => (
    <Box sx={{ 
      display: 'flex', 
      flexWrap: 'wrap', 
      gap: 1,
      width: { xs: '100%', sm: 'auto' }
    }}>
      <Button
        startIcon={<FilterIcon />}
        onClick={() => setShowFilters(!showFilters)}
        size={isMobile ? "small" : "medium"}
        variant={showFilters ? "contained" : "outlined"}
      >
        Filters
      </Button>

      <Tooltip title="Column Visibility">
        <Button
          startIcon={<ViewColumnIcon />}
          onClick={handleColumnVisibilityMenuOpen}
          size={isMobile ? "small" : "medium"}
          variant="outlined"
        >
          {isMobile ? '' : 'Columns'}
        </Button>
      </Tooltip>

      <Button
        startIcon={<DownloadIcon />}
        onClick={handleExport}
        size={isMobile ? "small" : "medium"}
        variant="outlined"
      >
        {isMobile ? '' : 'Export'}
      </Button>

      {(user?.role === 'admin' || user?.role === 'project_user') && (
        <>
          <input
            accept=".xlsx,.xls"
            style={{ display: 'none' }}
            id="bulk-upload"
            type="file"
            onChange={handleBulkUpload}
            disabled={uploading}
          />
          <label htmlFor="bulk-upload">
            <Button
              component="span"
              startIcon={uploading ? <CircularProgress size={16} /> : <UploadIcon />}
              disabled={uploading}
              size={isMobile ? "small" : "medium"}
              variant="outlined"
            >
              {isMobile ? '' : uploading ? 'Uploading...' : 'Import'}
            </Button>
          </label>

          <Button
            startIcon={<DownloadIcon />}
            onClick={downloadTemplate}
            size={isMobile ? "small" : "medium"}
            variant="outlined"
          >
            {isMobile ? '' : 'Template'}
          </Button>

          <Button
            startIcon={<AddIcon />}
            onClick={() => setAddDialog(true)}
            size={isMobile ? "small" : "medium"}
            variant="contained"
          >
            {isMobile ? '' : 'Add Product'}
          </Button>
        </>
      )}
    </Box>
  );

  const renderMobileToolbar = () => (
    <Box sx={{ 
      display: { xs: 'flex', sm: 'none' },
      flexDirection: 'column',
      gap: 1,
      mt: 1
    }}>
      {user?.role === 'admin' && (
        <Fab
          color="primary"
          aria-label="add"
          onClick={() => setAddDialog(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            right: 16,
            zIndex: 1000
          }}
        >
          <AddIcon />
        </Fab>
      )}
    </Box>
  );

  const renderFiltersSection = () => (
    showFilters && (
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Filters
        </Typography>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6} md={3}>
            <FormControl fullWidth>
              <InputLabel>Brand</InputLabel>
              <Select
                value={filters.brand}
                onChange={(e) => handleFilterChange('brand', e.target.value)}
              >
                <MenuItem value="">All Brands</MenuItem>
                {brands.map(brand => (
                  <MenuItem key={brand._id} value={brand._id}>
                    {brand.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <FormControl fullWidth>
              <InputLabel>Phase</InputLabel>
              <Select
                value={filters.phase}
                onChange={(e) => handleFilterChange('phase', e.target.value)}
              >
                <MenuItem value="">All Phases</MenuItem>
                <MenuItem value="1 Phase">1 Phase</MenuItem>
                <MenuItem value="3 Phase">3 Phase</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <TextField
              fullWidth
              label="Min HP"
              type="number"
              value={filters.minHp}
              onChange={(e) => handleFilterChange('minHp', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <TextField
              fullWidth
              label="Max HP"
              type="number"
              value={filters.maxHp}
              onChange={(e) => handleFilterChange('maxHp', e.target.value)}
            />
          </Grid>

          {user?.role !== 'employee' && (
            <>
              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  label="Min Price"
                  type="number"
                  value={filters.minPrice}
                  onChange={(e) => handleFilterChange('minPrice', e.target.value)}
                />
              </Grid>

              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  label="Max Price"
                  type="number"
                  value={filters.maxPrice}
                  onChange={(e) => handleFilterChange('maxPrice', e.target.value)}
                />
              </Grid>
            </>
          )}

          <Grid item xs={12} sm={6} md={3}>
            <TextField
              fullWidth
              label="Min Max Head"
              type="number"
              value={filters.minMaxHead}
              onChange={(e) => handleFilterChange('minMaxHead', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <TextField
              fullWidth
              label="Max Max Head"
              type="number"
              value={filters.maxMaxHead}
              onChange={(e) => handleFilterChange('maxMaxHead', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <TextField
              fullWidth
              label="Min Max Flow"
              type="number"
              value={filters.minMaxFlow}
              onChange={(e) => handleFilterChange('minMaxFlow', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <TextField
              fullWidth
              label="Max Max Flow"
              type="number"
              value={filters.maxMaxFlow}
              onChange={(e) => handleFilterChange('maxMaxFlow', e.target.value)}
            />
          </Grid>

          <Grid item xs={12}>
            <Button
              fullWidth
              variant="outlined"
              onClick={clearFilters}
              sx={{ mt: 1 }}
            >
              Clear All Filters
            </Button>
          </Grid>
        </Grid>
      </Paper>
    )
  );

  const renderDataGrid = () => (
    <Paper elevation={3} sx={{
      height: isMobile ? 400 : 'auto',
      minHeight: isMobile ? 400 : 500,
      width: '100%',
      overflow: 'hidden',
      '& .MuiDataGrid-root': {
        border: 'none',
      },
      '& .MuiDataGrid-columnHeaders': {
        backgroundColor: theme.palette.primary.main,
        color: theme.palette.primary.contrastText,
        fontWeight: 600,
      },
      '& .MuiDataGrid-cell': {
        borderBottom: `1px solid ${theme.palette.divider}`,
      }
    }}>
      <DataGrid
        rows={filteredProducts}
        columns={columns}
        pageSize={isMobile ? 10 : 25}
        rowsPerPageOptions={isMobile ? [10, 25] : [25, 50, 100]}
        checkboxSelection={user?.role === 'admin' && !isMobile}
        disableSelectionOnClick
        getRowId={(row) => row._id}
        density={isMobile ? "compact" : "standard"}
        scrollbarSize={isMobile ? 8 : 17}
        columnVisibilityModel={{
          modelNumber: columnVisibility.modelNumber,
          brand: columnVisibility.brand,
          hp: columnVisibility.hp,
          outlet: columnVisibility.outlet && !isMobile,
          maxHead: columnVisibility.maxHead && !isMobile,
          maxFlow: columnVisibility.maxFlow && !isMobile,
          watt: columnVisibility.watt,
          phase: columnVisibility.phase,
          price: columnVisibility.price,
          actions: columnVisibility.actions,
        }}
        sx={{
          '& .MuiDataGrid-cell': {
            padding: isMobile ? '4px 8px' : '8px 16px',
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
          },
          '& .MuiDataGrid-columnHeader': {
            padding: isMobile ? '4px 8px' : '8px 16px',
          },
          '& .MuiDataGrid-virtualScroller': {
            overflowX: 'auto',
            WebkitOverflowScrolling: 'touch',
          }
        }}
      />
    </Paper>
  );

  const renderDialogs = () => (
    <>
      {/* Add Product Dialog */}
      <Dialog 
        open={addDialog} 
        onClose={() => setAddDialog(false)} 
        maxWidth="md" 
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>Add New Product</DialogTitle>
        <DialogContent>
          <AddProductForm 
            categoryId={categoryId}
            brands={brands}
            onSuccess={handleAddSuccess}
            onCancel={() => setAddDialog(false)}
          />
        </DialogContent>
      </Dialog>

      {/* Edit Product Dialog */}
      <Dialog 
        open={editDialog} 
        onClose={() => setEditDialog(false)} 
        maxWidth="md" 
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>Edit Product</DialogTitle>
        <DialogContent>
          <EditProductForm 
            product={currentProduct}
            brands={brands}
            onSuccess={handleEditSuccess}
            onCancel={() => setEditDialog(false)}
          />
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialog}
        onClose={() => setDeleteDialog(false)}
      >
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this product? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialog(false)}>Cancel</Button>
          <Button onClick={handleConfirmDelete} color="error" autoFocus>
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <CircularProgress />
      </Box>
    );
  }

  if (!category) {
    return (
      <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
        <Header />
        <Container sx={{ mt: 4, flexGrow: 1 }}>
          <Alert severity="error">Category not found</Alert>
        </Container>
        <Footer />
      </Box>
    );
  }

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
      <Header />
      
      <Container maxWidth="xl" sx={{ mt: { xs: 2, md: 4 }, mb: 4, flexGrow: 1, px: { xs: 1, md: 3 } }}>
        {renderPageHeader()}

        <Paper sx={{ mb: 3 }}>
          <Toolbar 
            sx={{ 
              flexDirection: { xs: 'column', sm: 'row' },
              alignItems: { xs: 'stretch', sm: 'center' },
              gap: { xs: 1, sm: 0 },
              py: { xs: 2, sm: 1 }
            }}
          >
            {renderToolbarButtons()}
            <Box sx={{ flexGrow: 1 }} />
            <Chip 
              label={`${user?.role?.replace('_', ' ').toUpperCase()} View`}
              color="primary"
              size={isMobile ? "small" : "medium"}
            />
          </Toolbar>
        </Paper>

        {renderMobileToolbar()}
        {renderFiltersSection()}
        {renderDataGrid()}

        {canAddProduct && isMobile && (
          <Fab
            color="primary"
            aria-label="add"
            onClick={() => setAddDialog(true)}
            sx={{
              position: 'fixed',
              bottom: 16,
              right: 16,
              zIndex: 1000,
            }}
          >
            <AddIcon />
          </Fab>
        )}
      </Container>

      <Footer />
      {renderDialogs()}
    </Box>
  );

        {/* Filters */}
        {showFilters && (
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              Filters
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth>
                  <InputLabel>Brand</InputLabel>
                  <Select
                    value={filters.brand}
                    onChange={(e) => handleFilterChange('brand', e.target.value)}
                  >
                    <MenuItem value="">All Brands</MenuItem>
                    {brands.map(brand => (
                      <MenuItem key={brand._id} value={brand._id}>
                        {brand.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth>
                  <InputLabel>Phase</InputLabel>
                  <Select
                    value={filters.phase}
                    onChange={(e) => handleFilterChange('phase', e.target.value)}
                  >
                    <MenuItem value="">All Phases</MenuItem>
                    <MenuItem value="1 Phase">1 Phase</MenuItem>
                    <MenuItem value="3 Phase">3 Phase</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  label="Min HP"
                  type="number"
                  value={filters.minHp}
                  onChange={(e) => handleFilterChange('minHp', e.target.value)}
                />
              </Grid>

              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  label="Max HP"
                  type="number"
                  value={filters.maxHp}
                  onChange={(e) => handleFilterChange('maxHp', e.target.value)}
                />
              </Grid>

              {user?.role !== 'employee' && (
                <>
                  <Grid item xs={12} sm={6} md={3}>
                    <TextField
                      fullWidth
                      label="Min Price"
                      type="number"
                      value={filters.minPrice}
                      onChange={(e) => handleFilterChange('minPrice', e.target.value)}
                    />
                  </Grid>

                  <Grid item xs={12} sm={6} md={3}>
                    <TextField
                      fullWidth
                      label="Max Price"
                      type="number"
                      value={filters.maxPrice}
                      onChange={(e) => handleFilterChange('maxPrice', e.target.value)}
                    />
                  </Grid>
                </>
              )}

              <Grid item xs={12}>
                <Button onClick={clearFilters} variant="outlined">
                  Clear Filters
                </Button>
              </Grid>
            </Grid>
          </Paper>
        )}

        {/* Data Grid */}
        <Paper sx={{ 
          height: isMobile ? 500 : 600,
          width: '100%',
          overflow: 'auto', // Enable horizontal scrolling on mobile
          '& .MuiDataGrid-root': {
            fontSize: isMobile ? '0.75rem' : '0.875rem',
            minWidth: isMobile ? 600 : 'auto', // Ensure minimum width for mobile scrolling
          },
          '& .MuiDataGrid-columnHeaders': {
            minHeight: isMobile ? '40px' : '56px',
            backgroundColor: theme.palette.grey[50],
          },
          '& .MuiDataGrid-row': {
            minHeight: isMobile ? '40px' : '52px',
          },
          '& .MuiDataGrid-columnHeader': {
            fontSize: isMobile ? '0.7rem' : '0.875rem',
            fontWeight: 600,
          },
          '& .MuiDataGrid-cell': {
            borderBottom: `1px solid ${theme.palette.divider}`,
          }
        }}>
          <DataGrid
            rows={filteredProducts}
            columns={columns}
            pageSize={isMobile ? 10 : 25}
            rowsPerPageOptions={isMobile ? [10, 25] : [25, 50, 100]}
            checkboxSelection={user?.role === 'admin' && !isMobile}
            disableSelectionOnClick
            getRowId={(row) => row._id}
            density={isMobile ? "compact" : "standard"}
            scrollbarSize={isMobile ? 8 : 17} // Thinner scrollbar on mobile
            columnVisibilityModel={{
              modelNumber: columnVisibility.modelNumber,
              brand: columnVisibility.brand,
              hp: columnVisibility.hp,
              outlet: columnVisibility.outlet && !isMobile, // Hide outlet on mobile
              maxHead: columnVisibility.maxHead && !isMobile, // Hide maxHead on mobile
              maxFlow: columnVisibility.maxFlow && !isMobile, // Hide maxFlow on mobile
              watt: columnVisibility.watt,
              phase: columnVisibility.phase,
              price: columnVisibility.price,
              actions: columnVisibility.actions,
            }}
            sx={{
              '& .MuiDataGrid-cell': {
                padding: isMobile ? '4px 8px' : '8px 16px',
                whiteSpace: 'nowrap',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
              },
              '& .MuiDataGrid-columnHeader': {
                padding: isMobile ? '4px 8px' : '8px 16px',
              },
              '& .MuiDataGrid-virtualScroller': {
                // Improve touch scrolling on mobile
                overflowX: 'auto',
                WebkitOverflowScrolling: 'touch',
              }
            }}
          />
        </Paper>

        {/* Mobile Add Button */}
        {canAddProduct && isMobile && (
          <Fab
            color="primary"
            aria-label="add"
            onClick={() => setAddDialog(true)}
            sx={{
              position: 'fixed',
              bottom: 16,
              right: 16,
              zIndex: 1000,
            }}
          >
            <AddIcon />
          </Fab>
        )}
      </Container>

      <Footer />
      {renderDialogs()}

      {/* Column Visibility Menu */}
      <Menu
        anchorEl={columnVisibilityMenuAnchor}
        open={Boolean(columnVisibilityMenuAnchor)}
        onClose={handleColumnVisibilityMenuClose}
        slotProps={{
          paper: {
            sx: {
              maxHeight: 400,
              width: isMobile ? 280 : 320,
              p: 1,
            }
          }
        }}
      >
        <Box sx={{ p: 1 }}>
          <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
            Column Visibility
          </Typography>
          <Divider sx={{ mb: 1 }} />
          
          <FormControlLabel
            control={
              <Checkbox
                checked={columnVisibility.modelNumber}
                onChange={() => handleColumnVisibilityToggle('modelNumber')}
                size={isMobile ? "small" : "medium"}
              />
            }
            label="Model Number"
            sx={{ display: 'block', mb: 0.5 }}
          />
          
          <FormControlLabel
            control={
              <Checkbox
                checked={columnVisibility.brand}
                onChange={() => handleColumnVisibilityToggle('brand')}
                size={isMobile ? "small" : "medium"}
              />
            }
            label="Brand"
            sx={{ display: 'block', mb: 0.5 }}
          />
          
          <FormControlLabel
            control={
              <Checkbox
                checked={columnVisibility.hp}
                onChange={() => handleColumnVisibilityToggle('hp')}
                size={isMobile ? "small" : "medium"}
              />
            }
            label="HP"
            sx={{ display: 'block', mb: 0.5 }}
          />
          
          {!isMobile && (
            <>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={columnVisibility.maxHead}
                    onChange={() => handleColumnVisibilityToggle('maxHead')}
                    size="medium"
                  />
                }
                label="Max Head"
                sx={{ display: 'block', mb: 0.5 }}
              />
              
              <FormControlLabel
                control={
                  <Checkbox
                    checked={columnVisibility.maxFlow}
                    onChange={() => handleColumnVisibilityToggle('maxFlow')}
                    size="medium"
                  />
                }
                label="Max Flow"
                sx={{ display: 'block', mb: 0.5 }}
              />
            </>
          )}
          
          <FormControlLabel
            control={
              <Checkbox
                checked={columnVisibility.watt}
                onChange={() => handleColumnVisibilityToggle('watt')}
                size={isMobile ? "small" : "medium"}
              />
            }
            label="Watt"
            sx={{ display: 'block', mb: 0.5 }}
          />
          
          <FormControlLabel
            control={
              <Checkbox
                checked={columnVisibility.phase}
                onChange={() => handleColumnVisibilityToggle('phase')}
                size={isMobile ? "small" : "medium"}
              />
            }
            label="Phase"
            sx={{ display: 'block', mb: 0.5 }}
          />
          
          {(user?.role === 'admin' || user?.role === 'project_user') && (
            <FormControlLabel
              control={
                <Checkbox
                  checked={columnVisibility.price}
                  onChange={() => handleColumnVisibilityToggle('price')}
                  size={isMobile ? "small" : "medium"}
                />
              }
              label="Price"
              sx={{ display: 'block', mb: 0.5 }}
            />
          )}
          
          {user?.role === 'admin' && (
            <FormControlLabel
              control={
                <Checkbox
                  checked={columnVisibility.actions}
                  onChange={() => handleColumnVisibilityToggle('actions')}
                  size={isMobile ? "small" : "medium"}
                />
              }
              label="Actions"
              sx={{ display: 'block', mb: 1 }}
            />
          )}
          
          <Divider sx={{ my: 1 }} />
          
          <Button
            size="small"
            onClick={resetColumnVisibility}
            fullWidth
            variant="outlined"
          >
            Reset to Default
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default CategoryDetails;